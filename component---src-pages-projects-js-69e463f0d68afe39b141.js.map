{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/components/Grid/Item.jsx","webpack:///./src/components/Grid/Grid.jsx","webpack:///./src/components/Grid/index.js","webpack:///./src/components/SEO.jsx","webpack:///./src/components/Anchor.jsx","webpack:///./src/components/Section.jsx"],"names":["LatestProjects","useState","searchTerm","setSearchTerm","projects","title","id","type","placeholder","value","onChange","ev","currentTarget","items","edges","filter","x","trim","node","frontmatter","toLowerCase","includes","map","uri","slug","image","childImageSharp","fixed","StyledItem","styled","div","Item","className","to","objectFit","objectPosition","width","height","maxHeight","alt","StyledGrid","section","Grid","idx","key","SEO","description","lang","meta","home","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","StyledAnchor","a","Anchor","StyledSection","Section","children"],"mappings":"uNA8DeA,UAtDQ,WAAO,IAAD,EACSC,mBAAS,IAAtCC,EADoB,KACRC,EADQ,KAEnBC,EAFmB,OAEnBA,SA8BR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,cACX,kBAAC,IAAD,CAASC,GAAI,WAAYD,MAAO,sBAC9B,2BACEE,KAAM,OACNC,YAAa,qBACbC,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAQR,EAAcQ,EAAGC,cAAcH,UAEnD,kBAAC,IAAD,CACEI,MAAOT,EAASU,MAAMC,QAff,SAACC,GAAD,MACS,KAAtBd,EAAWe,QACXD,EAAEE,KAAKC,YAAYd,MAAMe,cAAcC,SAASnB,EAAWkB,kBAahBE,KAAI,SAACN,GAAD,MAAQ,CAC/CO,IAAI,aAAcP,EAAEE,KAAKC,YAAYK,KACrCnB,MAAOW,EAAEE,KAAKC,YAAYd,MAC1BoB,MAAOT,EAAEE,KAAKC,YAAYM,MAAMC,gBAAgBC,gB,mQChDtDC,EAAaC,IAAOC,IAAV,mEAAGD,CAAH,ofA+DDE,EA3BF,SAAC,GAAD,IAAGR,EAAH,EAAGA,IAAKE,EAAR,EAAQA,MAAOpB,EAAf,EAAeA,MAAf,OACX,kBAACuB,EAAD,KACE,yBAAKI,UAAW,SACd,kBAAC,OAAD,CAAMC,GAAIV,GACR,kBAAC,IAAD,CACEW,UAAW,QACXC,eAAgB,SAChBC,MAAO,OACPC,OAAQ,OACRC,UAAW,QACXX,MAAOF,EACPc,IAAKlC,MAIX,yBAAK2B,UAAW,SACd,kBAAC,OAAD,CAAMC,GAAIV,GAAMlB,MCpDhBmC,EAAaX,IAAOY,QAAV,uEAAGZ,CAAH,wJA8BDa,EArBF,SAAC,GAAD,IAAG7B,EAAH,EAAGA,MAAH,OACX,kBAAC2B,EAAD,KACG3B,EAAMS,KAAI,SAACN,EAAG2B,GAAJ,OACT,yBAAKC,IAAKD,GACR,kBAAC,EAAS3B,SClBH0B,O,mFCIf,SAASG,EAAT,GAAwD,IAAzCC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,KAAM3C,EAAe,EAAfA,MAAO4C,EAAQ,EAARA,KACrCC,EAD6C,OAC7CA,KAcFC,EAAkBL,GAAeI,EAAKE,aAAaN,YAEzD,OACE,kBAAC,SAAD,CACEO,eAAgB,CACdN,QAEF1C,MAAOA,EACPiD,cACEL,EAAOC,EAAKE,aAAa/C,MAArB,QAAqC6C,EAAKE,aAAa/C,MAE7D2C,KAAM,CACJ,CACEO,KAAM,cACNC,QAASL,GAEX,CACEM,SAAU,WACVD,QAASnD,GAEX,CACEoD,SAAU,iBACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAM,gBACNC,QAASnD,GAEX,CACEkD,KAAM,sBACNC,QAASL,IAEXQ,OAAOX,KAKfH,EAAIe,aAAe,CACjBb,KAAM,KACNC,KAAM,GACNF,YAAa,GACbG,MAAM,GAWOJ,O,usPChFTgB,EAAehC,IAAOiC,EAAV,0EAAGjC,CAAH,mEAaHkC,EANA,SAAC,GAAD,IAAGzD,EAAH,EAAGA,GAAH,OAAY,kBAACuD,EAAD,CAAcvD,GAAIA,KCLvC0D,EAAgBnC,IAAOY,QAAV,yEAAGZ,CAAH,6FAwBJoC,IAdC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAU5D,EAAb,EAAaA,GAAID,EAAjB,EAAiBA,MAAjB,OACd,kBAAC2D,EAAD,KACE,kBAAC,EAAD,CAAQ1D,GAAIA,IACZ,4BAAKD,GACJ6D","file":"component---src-pages-projects-js-69e463f0d68afe39b141.js","sourcesContent":["import React, { useState } from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Grid from '../components/Grid';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport Section from '../components/Section';\n\nconst LatestProjects = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const { projects } = useStaticQuery(graphql`\n    {\n      projects: allMarkdownRemark(\n        filter: { fileInfo: { sourceInstanceName: { eq: \"projects\" } } }\n        sort: { fields: frontmatter___title, order: ASC }\n        limit: 6\n      ) {\n        edges {\n          node {\n            frontmatter {\n              slug\n              title\n              image {\n                childImageSharp {\n                  fixed(quality: 95, width: 410, height: 300) {\n                    ...GatsbyImageSharpFixed_withWebp\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const filter = (x) =>\n    searchTerm.trim() === '' ||\n    x.node.frontmatter.title.toLowerCase().includes(searchTerm.toLowerCase());\n\n  return (\n    <Layout>\n      <SEO title=\"Proyectos\" />\n      <Section id={'projects'} title={'Nuestros Proyectos'}>\n        <input\n          type={'text'}\n          placeholder={'Buscar proyecto...'}\n          value={searchTerm}\n          onChange={(ev) => setSearchTerm(ev.currentTarget.value)}\n        />\n        <Grid\n          items={projects.edges.filter(filter).map((x) => ({\n            uri: `/projects/${x.node.frontmatter.slug}`,\n            title: x.node.frontmatter.title,\n            image: x.node.frontmatter.image.childImageSharp.fixed,\n          }))}\n        />\n      </Section>\n    </Layout>\n  );\n};\n\nexport default LatestProjects;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport GatsbyImage from 'gatsby-image';\nimport { Link } from 'gatsby';\n\nconst StyledItem = styled.div`\n  position: relative;\n  text-align: left;\n  .gatsby-image-wrapper {\n    display: block !important;\n  }\n  .gatsby-image-wrapper,\n  img {\n    margin-bottom: 0;\n  }\n  box-shadow: 0 0 0.3rem rgba(0, 0, 0, 0.3);\n  .image {\n    overflow: hidden;\n    a {\n      display: block;\n      &:hover {\n        transform: scale(1.2) rotate(5deg);\n      }\n    }\n  }\n  .title {\n    position: absolute;\n    bottom: -1rem;\n    right: 0.5rem;\n    background: rgba(255, 255, 255, 1);\n    padding: 0.7rem 1rem 1.5rem;\n    box-shadow: 0 -0.2rem 0.2rem rgba(0, 0, 0, 0.2);\n    a {\n      text-transform: uppercase;\n      color: var(--primary-color);\n      text-decoration: none;\n      font-size: 1.4rem;\n    }\n  }\n`;\n\nconst Item = ({ uri, image, title }) => (\n  <StyledItem>\n    <div className={'image'}>\n      <Link to={uri}>\n        <GatsbyImage\n          objectFit={'cover'}\n          objectPosition={'100% 0'}\n          width={'100%'}\n          height={'100%'}\n          maxHeight={'25rem'}\n          fixed={image}\n          alt={title}\n        />\n      </Link>\n    </div>\n    <div className={'title'}>\n      <Link to={uri}>{title}</Link>\n    </div>\n  </StyledItem>\n);\n\nItem.propTypes = {\n  uri: PropTypes.string,\n  image: PropTypes.object,\n  title: PropTypes.string,\n};\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Item from './Item';\n\nconst StyledGrid = styled.section`\n  margin: 1rem 0;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(410px, 410px));\n  grid-gap: 1.5rem;\n  justify-content: center;\n  justify-items: center;\n`;\n\nconst Grid = ({ items }) => (\n  <StyledGrid>\n    {items.map((x, idx) => (\n      <div key={idx}>\n        <Item {...x} />\n      </div>\n    ))}\n  </StyledGrid>\n);\n\nGrid.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      image: PropTypes.object.isRequired,\n      title: PropTypes.string.isRequired,\n      uri: PropTypes.string.isRequired,\n      text: PropTypes.string,\n    })\n  ),\n};\n\nexport default Grid;\n","import Grid from './Grid';\nexport default Grid;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet-async';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title, home }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={\n        home ? site.siteMetadata.title : `%s | ${site.siteMetadata.title}`\n      }\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: site.siteMetadata.author,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: 'es',\n  meta: [],\n  description: '',\n  home: false,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  home: PropTypes.bool,\n};\n\nexport default SEO;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledAnchor = styled.a`\n  display: block;\n  position: relative;\n  top: -100px;\n  visibility: hidden;\n`;\n\nconst Anchor = ({ id }) => <StyledAnchor id={id} />;\n\nAnchor.propTypes = {\n  id: PropTypes.string,\n};\n\nexport default Anchor;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Anchor from './Anchor';\n\nconst StyledSection = styled.section`\n  padding: 1.5rem;\n  max-width: 1280px;\n  margin: 0 auto;\n  text-align: center;\n  h2 {\n    margin-bottom: 2rem;\n  }\n`;\n\nconst Section = ({ children, id, title }) => (\n  <StyledSection>\n    <Anchor id={id} />\n    <h2>{title}</h2>\n    {children}\n  </StyledSection>\n);\n\nSection.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string,\n  id: PropTypes.string,\n};\n\nexport default Section;\n"],"sourceRoot":""}