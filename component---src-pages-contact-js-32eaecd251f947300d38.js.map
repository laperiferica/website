{"version":3,"sources":["webpack:///./src/components/contact/Team/Member.jsx","webpack:///./src/components/contact/Team/Team.jsx","webpack:///./src/components/contact/Team/index.js","webpack:///./src/pages/contact.js","webpack:///./src/components/SEO.jsx","webpack:///./src/components/Anchor.jsx","webpack:///./src/components/Section.jsx"],"names":["StyledMember","styled","div","Member","image","name","email","tasks","fixed","childImageSharp","alt","map","x","idx","key","StyledTeam","section","Team","edges","allMarkdownRemark","node","frontmatter","ContactPage","Layout","SEO","title","Section","id","href","meta","target","rel","Social","size","description","lang","home","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps","StyledAnchor","a","Anchor","StyledSection","children"],"mappings":"wNAKMA,EAAeC,IAAOC,IAAV,uEAAGD,CAAH,kGAiCHE,EApBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,MAAvB,OACb,kBAACP,EAAD,KACE,kBAAC,IAAD,CAAaQ,MAAOJ,EAAMK,gBAAgBD,MAAOE,IAAG,WAAaL,IACjE,4BAAKA,GACL,4BACGE,EAAMI,KAAI,SAACC,EAAGC,GAAJ,OACT,wBAAIC,IAAKD,GAAMD,OAGnB,2BAAIN,KCrBFS,EAAad,IAAOe,QAAV,uEAAGf,CAAH,uJCLDgB,EDqBF,WAAO,IAEKC,EAFN,OAEfC,kBAAqBD,MAiCvB,OACE,kBAACH,EAAD,KACE,4BACGG,EACEP,KAAI,SAACC,GAAD,OAAOA,EAAEQ,QACbT,KAAI,SAACC,EAAGC,GAAJ,OACH,wBAAIC,IAAKD,GACP,kBAAC,EAAWD,EAAES,oB,oCEnCbC,UAnBK,kBAClB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,MAAM,YACX,kBAACC,EAAA,EAAD,CAASC,GAAI,QAASF,MAAO,SAC3B,uBACEG,KAAI,UAAYC,IAAKvB,MACrBwB,OAAQ,SACRC,IAAK,uBAEJF,IAAKvB,OAER,kBAAC,EAAD,OAEF,kBAACoB,EAAA,EAAD,CAASC,GAAI,SAAUF,MAAO,kBAC5B,kBAACO,EAAA,EAAD,CAAQC,KAAM,Q,g8XCnBpB,SAAST,EAAT,GAAwD,IAAzCU,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,KAAMN,EAAqB,EAArBA,KAAMJ,EAAe,EAAfA,MAAOW,EAAQ,EAARA,KACrCC,EAD6C,OAC7CA,KAcFC,EAAkBJ,GAAeG,EAAKE,aAAaL,YAEzD,OACE,kBAAC,SAAD,CACEM,eAAgB,CACdL,QAEFV,MAAOA,EACPgB,cACEL,EAAOC,EAAKE,aAAad,MAArB,QAAqCY,EAAKE,aAAad,MAE7DI,KAAM,CACJ,CACExB,KAAM,cACNqC,QAASJ,GAEX,CACEK,SAAU,WACVD,QAASjB,GAEX,CACEkB,SAAU,iBACVD,QAASJ,GAEX,CACEK,SAAU,UACVD,QAAS,WAEX,CACErC,KAAM,eACNqC,QAAS,WAEX,CACErC,KAAM,kBACNqC,QAASL,EAAKE,aAAaK,QAE7B,CACEvC,KAAM,gBACNqC,QAASjB,GAEX,CACEpB,KAAM,sBACNqC,QAASJ,IAEXO,OAAOhB,KAKfL,EAAIsB,aAAe,CACjBX,KAAM,KACNN,KAAM,GACNK,YAAa,GACbE,MAAM,GAWOZ,O,uEChFTuB,EAAe9C,IAAO+C,EAAV,0EAAG/C,CAAH,mEAaHgD,EANA,SAAC,GAAD,IAAGtB,EAAH,EAAGA,GAAH,OAAY,kBAACoB,EAAD,CAAcpB,GAAIA,KCLvCuB,EAAgBjD,IAAOe,QAAV,yEAAGf,CAAH,6FAwBJyB,IAdC,SAAC,GAAD,IAAGyB,EAAH,EAAGA,SAAUxB,EAAb,EAAaA,GAAIF,EAAjB,EAAiBA,MAAjB,OACd,kBAACyB,EAAD,KACE,kBAAC,EAAD,CAAQvB,GAAIA,IACZ,4BAAKF,GACJ0B","file":"component---src-pages-contact-js-32eaecd251f947300d38.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport GatsbyImage from 'gatsby-image';\n\nconst StyledMember = styled.div`\n  > ul {\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    list-style: none;\n    > li {\n      padding: 0;\n    }\n  }\n`;\n\nconst Member = ({ image, name, email, tasks }) => (\n  <StyledMember>\n    <GatsbyImage fixed={image.childImageSharp.fixed} alt={`Foto de ${name}`} />\n    <h3>{name}</h3>\n    <ul>\n      {tasks.map((x, idx) => (\n        <li key={idx}>{x}</li>\n      ))}\n    </ul>\n    <p>{email}</p>\n  </StyledMember>\n);\n\nMember.propTypes = {\n  email: PropTypes.string,\n  image: PropTypes.object,\n  name: PropTypes.string,\n  tasks: PropTypes.array,\n};\n\nexport default Member;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Member from './Member';\n\nconst StyledTeam = styled.section`\n  margin: 1rem 0;\n  text-align: center;\n  > ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    > li {\n      padding: 1.5rem;\n    }\n  }\n`;\n\nconst Team = () => {\n  const {\n    allMarkdownRemark: { edges },\n  } = useStaticQuery(graphql`\n    {\n      allMarkdownRemark(\n        filter: { fileInfo: { sourceInstanceName: { eq: \"team\" } } }\n        sort: { fields: frontmatter___name, order: ASC }\n      ) {\n        edges {\n          node {\n            frontmatter {\n              slug\n              name\n              tasks\n              email\n              social {\n                linkedin\n                twitter\n                facebook\n              }\n              image {\n                childImageSharp {\n                  fixed(quality: 95, width: 200) {\n                    ...GatsbyImageSharpFixed_withWebp\n                  }\n                }\n              }\n            }\n            html\n          }\n        }\n      }\n    }\n  `);\n  return (\n    <StyledTeam>\n      <ul>\n        {edges\n          .map((x) => x.node)\n          .map((x, idx) => (\n            <li key={idx}>\n              <Member {...x.frontmatter} />\n            </li>\n          ))}\n      </ul>\n    </StyledTeam>\n  );\n};\n\nexport default Team;\n","import Team from './Team';\nexport default Team;\n","import React from 'react';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport Team from '../components/contact/Team';\nimport Section from '../components/Section';\nimport Social from '../components/Social';\n\nimport meta from '../../data/static/meta';\n\nconst ContactPage = () => (\n  <Layout>\n    <SEO title=\"Contact\" />\n    <Section id={'email'} title={'Email'}>\n      <a\n        href={`mailto:${meta.email}`}\n        target={'_blank'}\n        rel={'noopener noreferrer'}\n      >\n        {meta.email}\n      </a>\n      <Team />\n    </Section>\n    <Section id={'social'} title={'Redes sociales'}>\n      <Social size={4} />\n    </Section>\n  </Layout>\n);\n\nexport default ContactPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet-async';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title, home }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={\n        home ? site.siteMetadata.title : `%s | ${site.siteMetadata.title}`\n      }\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: site.siteMetadata.author,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: 'es',\n  meta: [],\n  description: '',\n  home: false,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  home: PropTypes.bool,\n};\n\nexport default SEO;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledAnchor = styled.a`\n  display: block;\n  position: relative;\n  top: -100px;\n  visibility: hidden;\n`;\n\nconst Anchor = ({ id }) => <StyledAnchor id={id} />;\n\nAnchor.propTypes = {\n  id: PropTypes.string,\n};\n\nexport default Anchor;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Anchor from './Anchor';\n\nconst StyledSection = styled.section`\n  padding: 1.5rem;\n  max-width: 1280px;\n  margin: 0 auto;\n  text-align: center;\n  h2 {\n    margin-bottom: 2rem;\n  }\n`;\n\nconst Section = ({ children, id, title }) => (\n  <StyledSection>\n    <Anchor id={id} />\n    <h2>{title}</h2>\n    {children}\n  </StyledSection>\n);\n\nSection.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string,\n  id: PropTypes.string,\n};\n\nexport default Section;\n"],"sourceRoot":""}