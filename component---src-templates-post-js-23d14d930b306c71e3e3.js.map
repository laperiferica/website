{"version":3,"sources":["webpack:///./src/components/Tags.jsx","webpack:///./src/templates/post.js","webpack:///./src/components/Gallery/Item.jsx","webpack:///./src/components/Gallery/Gallery.jsx","webpack:///./src/components/Gallery/index.js"],"names":["StyledTags","styled","div","injectIntl","items","intl","formatMessage","id","map","x","idx","key","to","reduce","acc","cur","concat","length","StyledPostPage","article","pageQuery","data","markdownRemark","frontmatter","html","Layout","SEO","title","Container","className","date","dangerouslySetInnerHTML","__html","gallery","Gallery","image","childImageSharp","fixed","tags","Share","StyledItem","props","even","css","Item","objectFit","objectPosition","width","height","maxHeight","alt","StyledGrid","section","Grid"],"mappings":"gkCAKA,IAAMA,EAAaC,IAAOC,IAAV,uEAAGD,CAAH,MA6BDE,wBA3BF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACXD,GACE,kBAACJ,EAAD,KACGK,EAAKC,cAAc,CAAEC,GAAI,SAD5B,IACwC,IACrCH,EACEI,KAAI,SAACC,EAAGC,GAAJ,OACH,kBAAC,OAAD,CAAMC,IAAKD,EAAKE,GAAE,eAAiBH,GAChCA,MAGJI,QACC,SAACC,EAAKC,EAAKL,GAAX,MACE,YAAII,GAAJ,CAASC,IAAKC,OACZN,EAAMN,EAAMa,OAAS,EAAI,CAAC,0BAAMN,KAAMD,EAAM,GAAlB,OAAkC,MAEhE,QCTJQ,EAAiBjB,IAAOkB,QAAV,2EAAGlB,CAAH,2IAoFPmB,GAFEjB,gCAlEE,SAAC,GAAD,IACfE,EADe,EACfA,KADe,IAEfgB,KACEC,eAAkBC,EAHL,EAGKA,YAAaC,EAHlB,EAGkBA,KAHlB,OAMf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,MAAOJ,EAAYI,QACxB,kBAACC,EAAA,EAAD,KACE,kBAACV,EAAD,KACE,4BAAKK,EAAYI,OAEjB,yBAAKE,UAAW,QACbxB,EAAKC,cAAc,CAAEC,GAAI,iBAD5B,IACgDgB,EAAYO,MAG5D,yBAAKC,wBAAyB,CAAEC,OAAQR,KAEvCD,EAAYU,SACX,oCACE,wBAAIJ,UAAW,WACZxB,EAAKC,cAAc,CAAEC,GAAI,sBAE5B,kBAAC2B,EAAA,EAAD,CACE9B,MAAOmB,EAAYU,QAAQzB,KAAI,SAACC,GAAD,MAAQ,CACrCkB,MAAOlB,EAAEkB,MACTQ,MAAO1B,EAAE0B,MAAMC,gBAAgBC,aAMvC,kBAAC,EAAD,CAAMjC,MAAOmB,EAAYe,OAEzB,wBAAIT,UAAW,SACZxB,EAAKC,cAAc,CAAEC,GAAI,sCAE5B,kBAACgC,EAAA,EAAD,YA+Bc,c,sGC5FhBC,EAAavC,IAAOC,IAAV,sEAAGD,CAAH,oaAGZ,SAACwC,GAAD,OACAA,EAAMC,KACFC,YADJ,wCAIIA,YAJJ,4CA0DWC,EAvBF,SAAC,GAAD,IAAGT,EAAH,EAAGA,MAAOR,EAAV,EAAUA,MAAOe,EAAjB,EAAiBA,KAAjB,OACX,kBAACF,EAAD,CAAYE,KAAMA,GAChB,yBAAKb,UAAW,SACd,kBAAC,IAAD,CACEgB,UAAW,QACXC,eAAgB,SAChBC,MAAO,OACPC,OAAQ,OACRC,UAAW,QACXZ,MAAOF,EACPe,IAAKvB,KAGT,yBAAKE,UAAW,SAAUF,KCnDxBwB,EAAalD,IAAOmD,QAAV,sEAAGnD,CAAH,yKA6BDoD,EAnBF,SAAC,GAAD,IAAGjD,EAAH,EAAGA,MAAH,OACX,kBAAC+C,EAAD,KACG/C,EAAMI,KAAI,SAACC,EAAGC,GAAJ,OACT,yBAAKC,IAAKD,GACR,kBAAC,EAAD,iBAAUD,EAAV,CAAaiC,QAAShC,EAAM,YCnBrBwB","file":"component---src-templates-post-js-23d14d930b306c71e3e3.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { injectIntl, Link } from 'gatsby-plugin-intl';\n\nconst StyledTags = styled.div``;\n\nconst Tags = ({ items, intl }) =>\n  items && (\n    <StyledTags>\n      {intl.formatMessage({ id: 'Tags' })}:{' '}\n      {items\n        .map((x, idx) => (\n          <Link key={idx} to={`/posts/tags/${x}`}>\n            {x}\n          </Link>\n        ))\n        .reduce(\n          (acc, cur, idx) =>\n            [...acc, cur].concat(\n              idx < items.length - 1 ? [<span key={-idx - 1}>, </span>] : []\n            ),\n          []\n        )}\n    </StyledTags>\n  );\n\nTags.propTypes = {\n  intl: PropTypes.shape({\n    formatMessage: PropTypes.func,\n  }),\n  items: PropTypes.array,\n};\n\nexport default injectIntl(Tags);\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport { injectIntl } from 'gatsby-plugin-intl';\n\nimport Layout from '../components/Layout';\nimport Container from '../components/Container';\nimport Share from '../components/Share';\nimport Gallery from '../components/Gallery';\nimport SEO from '../components/SEO';\nimport Tags from '../components/Tags';\n\nconst StyledPostPage = styled.article`\n  text-align: justify;\n  max-width: 900px;\n  margin: 0 auto;\n  h2 {\n    text-align: center;\n  }\n  h4.gallery,\n  h4.share {\n    margin-top: 3rem;\n  }\n  .meta {\n    text-align: center;\n  }\n`;\n\nconst PostPage = ({\n  intl,\n  data: {\n    markdownRemark: { frontmatter, html },\n  },\n}) => (\n  <Layout>\n    <SEO title={frontmatter.title} />\n    <Container>\n      <StyledPostPage>\n        <h2>{frontmatter.title}</h2>\n\n        <div className={'meta'}>\n          {intl.formatMessage({ id: 'Published on' })} {frontmatter.date}\n        </div>\n\n        <div dangerouslySetInnerHTML={{ __html: html }} />\n\n        {frontmatter.gallery && (\n          <>\n            <h4 className={'gallery'}>\n              {intl.formatMessage({ id: 'Media Gallery...' })}\n            </h4>\n            <Gallery\n              items={frontmatter.gallery.map((x) => ({\n                title: x.title,\n                image: x.image.childImageSharp.fixed,\n              }))}\n            />\n          </>\n        )}\n\n        <Tags items={frontmatter.tags} />\n\n        <h4 className={'share'}>\n          {intl.formatMessage({ id: 'Share on your social networks...' })}\n        </h4>\n        <Share />\n      </StyledPostPage>\n    </Container>\n  </Layout>\n);\n\nPostPage.propTypes = {\n  intl: PropTypes.shape({\n    formatMessage: PropTypes.func,\n  }),\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        image: PropTypes.object,\n        title: PropTypes.string,\n        date: PropTypes.string,\n        tags: PropTypes.array,\n        gallery: PropTypes.arrayOf(\n          PropTypes.shape({\n            title: PropTypes.string,\n            image: PropTypes.object,\n          })\n        ),\n      }),\n      html: PropTypes.string,\n    }),\n  }),\n};\n\nexport default injectIntl(PostPage);\n\nexport const pageQuery = graphql`\n  query($slug: String) {\n    markdownRemark(\n      frontmatter: { slug: { eq: $slug } }\n      fileInfo: { sourceInstanceName: { eq: \"posts\" } }\n    ) {\n      frontmatter {\n        slug\n        title\n        tags\n        gallery {\n          title\n          image {\n            childImageSharp {\n              fixed(quality: 95, width: 250, height: 250, fit: INSIDE) {\n                ...GatsbyImageSharpFixed_withWebp\n              }\n            }\n          }\n        }\n        date(formatString: \"d/M/YYYY\")\n        image {\n          childImageSharp {\n            fluid(quality: 95) {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n            fixed(quality: 95, height: 500) {\n              ...GatsbyImageSharpFixed_withWebp\n            }\n          }\n        }\n      }\n      html\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\nimport GatsbyImage from 'gatsby-image';\n\nconst StyledItem = styled.div`\n  position: relative;\n  transition: transform 0.3s;\n  ${(props) =>\n    props.even\n      ? css`\n          transform: rotate(3deg) scale(0.8);\n        `\n      : css`\n          transform: rotate(-3deg) scale(0.8);\n        `}\n  -webkit-backface-visibility: hidden;\n  padding: 0.7rem 0.7rem 0;\n  text-align: left;\n  .gatsby-image-wrapper {\n    display: block !important;\n  }\n  .gatsby-image-wrapper,\n  img {\n    margin-bottom: 0;\n  }\n  box-shadow: 0 0 0.3rem rgba(0, 0, 0, 0.3);\n  .image {\n    a {\n      display: block;\n      &:hover {\n        transform: scale(1.2) rotate(5deg);\n      }\n    }\n  }\n  .title {\n    padding: 0.7rem 1rem 1.5rem;\n    text-align: center;\n  }\n  &:hover {\n    transform: rotate(0deg) scale(1);\n  }\n`;\n\nconst Item = ({ image, title, even }) => (\n  <StyledItem even={even}>\n    <div className={'image'}>\n      <GatsbyImage\n        objectFit={'cover'}\n        objectPosition={'100% 0'}\n        width={'100%'}\n        height={'100%'}\n        maxHeight={'25rem'}\n        fixed={image}\n        alt={title}\n      />\n    </div>\n    <div className={'title'}>{title}</div>\n  </StyledItem>\n);\n\nItem.propTypes = {\n  image: PropTypes.object,\n  title: PropTypes.string,\n  even: PropTypes.bool,\n};\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Item from './Item';\n\nconst StyledGrid = styled.section`\n  margin: 1rem 0;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 250px));\n  grid-gap: 1rem;\n  justify-content: center;\n  align-items: center;\n  justify-items: center;\n`;\n\nconst Grid = ({ items }) => (\n  <StyledGrid>\n    {items.map((x, idx) => (\n      <div key={idx}>\n        <Item {...x} even={!!(idx % 2)} />\n      </div>\n    ))}\n  </StyledGrid>\n);\n\nGrid.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      image: PropTypes.object.isRequired,\n      title: PropTypes.string,\n    })\n  ),\n};\n\nexport default Grid;\n\n","import Gallery from './Gallery';\nexport default Gallery;\n"],"sourceRoot":""}