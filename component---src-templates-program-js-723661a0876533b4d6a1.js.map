{"version":3,"sources":["webpack:///./src/templates/program.js","webpack:///./src/components/Grid/Item.jsx","webpack:///./src/components/Grid/Grid.jsx","webpack:///./src/components/Grid/index.js"],"names":["StyledProgramPage","styled","article","injectIntl","intl","data","markdownRemark","frontmatter","html","title","className","dangerouslySetInnerHTML","__html","formatMessage","id","projects","length","align","items","map","x","uri","slug","image","childImageSharp","fixed","pageQuery","StyledItem","div","Item","date","to","alt","StyledGrid","section","props","Grid","idx","key","defaultProps"],"mappings":"oQAYMA,EAAoBC,IAAOC,QAAV,iFAAGD,CAAH,wKA8ERE,gCA7DK,SAAC,GAAD,IAClBC,EADkB,EAClBA,KADkB,IAElBC,KACEC,eAAkBC,EAHF,EAGEA,YAAaC,EAHf,EAGeA,KAHf,OAMlB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAOF,EAAYE,QACxB,kBAAC,IAAD,KACE,kBAACT,EAAD,KACE,yBAAKU,UAAW,UACd,4BAAKH,EAAYE,QAEnB,yBAAKE,wBAAyB,CAAEC,OAAQJ,KAExC,wBAAIE,UAAW,SACZN,EAAKS,cAAc,CAAEC,GAAI,mCAE5B,kBAAC,IAAD,OAEEP,EAAYQ,UAAYR,EAAYQ,SAASC,QAAU,GACvD,yBAAKN,UAAW,YACd,4BAAKN,EAAKS,cAAc,CAAEC,GAAI,sBAC9B,kBAAC,IAAD,CACEG,MAAO,OACPC,MAAOX,EAAYQ,SAASI,KAAI,SAACC,GAAD,MAAQ,CACtCC,IAAI,aAAcD,EAAEb,YAAYe,KAChCb,MAAOW,EAAEb,YAAYE,MACrBc,MAAOH,EAAEb,YAAYgB,MAAMC,gBAAgBC,mBAmCpD,IAAMC,EAAS,c,wGCtFhBC,EAAa1B,IAAO2B,IAAV,mEAAG3B,CAAH,2hBAmED4B,EArBF,SAAC,GAAD,IAAGR,EAAH,EAAGA,IAAKE,EAAR,EAAQA,MAAOd,EAAf,EAAeA,MAAOqB,EAAtB,EAAsBA,KAAtB,OACX,kBAACH,EAAD,KACE,yBAAKjB,UAAW,SACd,kBAAC,OAAD,CAAMqB,GAAIV,GACR,kBAAC,IAAD,CAAaI,MAAOF,EAAOS,IAAKvB,MAGpC,yBAAKC,UAAW,SACd,kBAAC,OAAD,CAAMqB,GAAIV,GAAMZ,GACfqB,GAAQ,+BAAQA,MCvDjBG,EAAahC,IAAOiC,QAAV,uEAAGjC,CAAH,mJAKK,SAACkC,GAAD,OAAWA,EAAMlB,SAIhCmB,EAAO,SAAC,GAAD,IAAGlB,EAAH,EAAGA,MAAOD,EAAV,EAAUA,MAAV,OACX,kBAACgB,EAAD,CAAYhB,MAAOA,GAChBC,EAAMC,KAAI,SAACC,EAAGiB,GAAJ,OACT,yBAAKC,IAAKD,GACR,kBAAC,EAASjB,SAmBlBgB,EAAKG,aAAe,CAClBtB,MAAO,UAGMmB,QCzCAA","file":"component---src-templates-program-js-723661a0876533b4d6a1.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport { injectIntl } from 'gatsby-plugin-intl';\n\nimport Layout from '../components/Layout';\nimport Container from '../components/Container';\nimport Share from '../components/Share';\nimport SEO from '../components/SEO';\nimport Grid from '../components/Grid';\n\nconst StyledProgramPage = styled.article`\n  text-align: justify;\n  word-break: break-word;\n  max-width: 900px;\n  margin: 0 auto;\n  .center {\n    text-align: center;\n  }\n  h4.gallery,\n  h4.share {\n    margin-top: 3rem;\n  }\n  .projects {\n    margin-top: 2rem;\n  }\n`;\n\nconst ProgramPage = ({\n  intl,\n  data: {\n    markdownRemark: { frontmatter, html },\n  },\n}) => (\n  <Layout>\n    <SEO title={frontmatter.title} />\n    <Container>\n      <StyledProgramPage>\n        <div className={'center'}>\n          <h2>{frontmatter.title}</h2>\n        </div>\n        <div dangerouslySetInnerHTML={{ __html: html }} />\n\n        <h4 className={'share'}>\n          {intl.formatMessage({ id: 'Share on your social networks' })}\n        </h4>\n        <Share />\n\n        {(frontmatter.projects && frontmatter.projects.length) > 0 && (\n          <div className={'projects'}>\n            <h2>{intl.formatMessage({ id: 'Related Projects' })}</h2>\n            <Grid\n              align={'left'}\n              items={frontmatter.projects.map((x) => ({\n                uri: `/projects/${x.frontmatter.slug}`,\n                title: x.frontmatter.title,\n                image: x.frontmatter.image.childImageSharp.fixed,\n              }))}\n            />\n          </div>\n        )}\n      </StyledProgramPage>\n    </Container>\n  </Layout>\n);\n\nProgramPage.propTypes = {\n  intl: PropTypes.shape({\n    formatMessage: PropTypes.func,\n  }),\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        projects: PropTypes.arrayOf(\n          PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              slug: PropTypes.string,\n              title: PropTypes.string,\n              image: PropTypes.object,\n            }),\n          })\n        ),\n      }),\n      html: PropTypes.string,\n    }),\n  }),\n};\n\nexport default injectIntl(ProgramPage);\n\nexport const pageQuery = graphql`\n  query($slug: String) {\n    markdownRemark(\n      frontmatter: { slug: { eq: $slug } }\n      fileInfo: { sourceInstanceName: { eq: \"programs\" } }\n    ) {\n      frontmatter {\n        title\n        projects {\n          frontmatter {\n            slug\n            title\n            image {\n              childImageSharp {\n                fixed(quality: 95, width: 300, height: 250) {\n                  ...GatsbyImageSharpFixed_withWebp\n                }\n              }\n            }\n          }\n        }\n      }\n      html\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport GatsbyImage from 'gatsby-image';\nimport { Link } from 'gatsby-plugin-intl';\n\nconst StyledItem = styled.div`\n  position: relative;\n  text-align: left;\n  .gatsby-image-wrapper {\n    display: block !important;\n  }\n  .gatsby-image-wrapper,\n  img {\n    margin-bottom: 0;\n  }\n  box-shadow: 0 0 0.3rem rgba(0, 0, 0, 0.3);\n  .image {\n    overflow: hidden;\n    a {\n      display: block;\n      &:hover {\n        transform: scale(1.2) rotate(5deg);\n      }\n      &::after {\n        display: none;\n      }\n    }\n  }\n  .title {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: rgba(0, 0, 0, 0.7);\n    padding: 0.7rem;\n    box-shadow: 0 -0.2rem 0.2rem rgba(0, 0, 0, 0.2);\n    a {\n      text-transform: uppercase;\n      color: white;\n      text-decoration: none;\n      font-size: 1.2rem;\n    }\n\n    small {\n      text-align: right;\n      display: block;\n      color: gray;\n    }\n  }\n`;\n\nconst Item = ({ uri, image, title, date }) => (\n  <StyledItem>\n    <div className={'image'}>\n      <Link to={uri}>\n        <GatsbyImage fixed={image} alt={title} />\n      </Link>\n    </div>\n    <div className={'title'}>\n      <Link to={uri}>{title}</Link>\n      {date && <small>{date}</small>}\n    </div>\n  </StyledItem>\n);\n\nItem.propTypes = {\n  uri: PropTypes.string,\n  image: PropTypes.object,\n  title: PropTypes.string,\n  date: PropTypes.string,\n};\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Item from './Item';\n\nconst StyledGrid = styled.section`\n  margin: 1rem 0;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 300px));\n  grid-gap: 2rem;\n  justify-content: ${(props) => props.align};\n  justify-items: center;\n`;\n\nconst Grid = ({ items, align }) => (\n  <StyledGrid align={align}>\n    {items.map((x, idx) => (\n      <div key={idx}>\n        <Item {...x} />\n      </div>\n    ))}\n  </StyledGrid>\n);\n\nGrid.propTypes = {\n  align: PropTypes.string,\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      image: PropTypes.object.isRequired,\n      title: PropTypes.string.isRequired,\n      date: PropTypes.string,\n      uri: PropTypes.string.isRequired,\n      text: PropTypes.string,\n    })\n  ),\n};\n\nGrid.defaultProps = {\n  align: 'center',\n};\n\nexport default Grid;\n","import Grid from './Grid';\nexport default Grid;\n"],"sourceRoot":""}