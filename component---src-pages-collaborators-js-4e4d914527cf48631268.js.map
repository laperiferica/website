{"version":3,"sources":["webpack:///./src/components/collaborators/List.jsx","webpack:///./src/pages/collaborators.js","webpack:///./src/components/BiLink.jsx","webpack:///./src/components/Persons/Item.jsx","webpack:///./src/components/Persons/Persons.jsx","webpack:///./src/components/Persons/index.js","webpack:///./src/components/SEO.jsx","webpack:///./src/components/Anchor.jsx","webpack:///./src/components/Section.jsx"],"names":["List","edges","allMarkdownRemark","Persons","items","map","x","uri","node","frontmatter","url","name","image","childImageSharp","fixed","LatestProjects","Layout","SEO","title","Section","id","BiLink","children","startsWith","href","target","rel","to","StyledItem","styled","li","Item","tasks","email","alt","idx","key","StyledPersons","ul","description","lang","meta","home","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps","StyledAnchor","a","Anchor","StyledSection","section"],"mappings":"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","file":"component---src-pages-collaborators-js-4e4d914527cf48631268.js","sourcesContent":["import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Persons from '../Persons';\n\nconst List = () => {\n  const {\n    allMarkdownRemark: { edges },\n  } = useStaticQuery(graphql`\n    {\n      allMarkdownRemark(\n        filter: { fileInfo: { sourceInstanceName: { eq: \"collaborators\" } } }\n        sort: { fields: frontmatter___name, order: ASC }\n      ) {\n        edges {\n          node {\n            frontmatter {\n              name\n              url\n              image {\n                childImageSharp {\n                  fixed(quality: 95, width: 190, height: 190) {\n                    ...GatsbyImageSharpFixed_withWebp\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  return (\n    <Persons\n      items={edges.map((x) => ({\n        uri: x.node.frontmatter.url,\n        name: x.node.frontmatter.name,\n        image: x.node.frontmatter.image.childImageSharp.fixed,\n      }))}\n    />\n  );\n};\n\nexport default List;\n\n","import React from 'react';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport Section from '../components/Section';\nimport List from '../components/collaborators/List';\n\nconst LatestProjects = () => (\n  <Layout>\n    <SEO title=\"Colaboradores\" />\n    <Section id={'collaborators'} title={'Colaboradores'}>\n      <List />\n    </Section>\n  </Layout>\n);\n\nexport default LatestProjects;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nconst BiLink = ({ url, children }) =>\n  url.startsWith('http') ? (\n    <a href={url} target={'_blank'} rel={'noopener noreferrer'}>\n      {children}\n    </a>\n  ) : (\n    <Link to={url}>{children}</Link>\n  );\n\nBiLink.propTypes = {\n  url: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default BiLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport GatsbyImage from 'gatsby-image';\n\nimport BiLink from '../BiLink';\n\nconst StyledItem = styled.li`\n  .gatsby-image-wrapper {\n    border-radius: 50%;\n  }\n  > ul {\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    list-style: none;\n    > li {\n      padding: 0;\n    }\n  }\n`;\n\nconst Item = ({ uri, image, name, tasks, email }) => (\n  <StyledItem>\n    <BiLink url={uri}>\n      <GatsbyImage fixed={image} alt={`Foto de ${name}`} />\n    </BiLink>\n    <BiLink url={uri}>\n      <h3>{name}</h3>\n    </BiLink>\n    {tasks && (\n      <ul>\n        {tasks.map((x, idx) => (\n          <li key={idx}>{x}</li>\n        ))}\n      </ul>\n    )}\n    <p>{email}</p>\n  </StyledItem>\n);\n\nItem.propTypes = {\n  uri: PropTypes.string,\n  image: PropTypes.object.isRequired,\n  name: PropTypes.string.isRequired,\n  tasks: PropTypes.array,\n  email: PropTypes.string,\n};\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Item from './Item';\n\nconst StyledPersons = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  > li {\n    padding: 1.5rem;\n  }\n`;\n\nconst Persons = ({ items }) => (\n  <StyledPersons>\n    {items.map((x, idx) => (\n      <Item key={idx} {...x} />\n    ))}\n  </StyledPersons>\n);\n\nPersons.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      uri: PropTypes.string,\n      image: PropTypes.object.isRequired,\n      name: PropTypes.string.isRequired,\n      tasks: PropTypes.array,\n      email: PropTypes.string,\n    })\n  ),\n};\n\nexport default Persons;\n","import Persons from './Persons';\nexport default Persons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet-async';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title, home }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={\n        home ? site.siteMetadata.title : `%s | ${site.siteMetadata.title}`\n      }\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: site.siteMetadata.author,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: 'es',\n  meta: [],\n  description: '',\n  home: false,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  home: PropTypes.bool,\n};\n\nexport default SEO;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledAnchor = styled.a`\n  display: block;\n  position: relative;\n  top: -100px;\n  visibility: hidden;\n`;\n\nconst Anchor = ({ id }) => <StyledAnchor id={id} />;\n\nAnchor.propTypes = {\n  id: PropTypes.string,\n};\n\nexport default Anchor;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Anchor from './Anchor';\n\nconst StyledSection = styled.section`\n  padding: 1.5rem;\n  max-width: 1280px;\n  margin: 0 auto;\n  text-align: center;\n  h2 {\n    margin-bottom: 2rem;\n  }\n`;\n\nconst Section = ({ children, id, title }) => (\n  <StyledSection>\n    <Anchor id={id} />\n    <h2>{title}</h2>\n    {children}\n  </StyledSection>\n);\n\nSection.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string,\n  id: PropTypes.string,\n};\n\nexport default Section;\n"],"sourceRoot":""}