{"version":3,"sources":["webpack:///./src/components/Gallery/Item.jsx","webpack:///./src/components/Gallery/Gallery.jsx","webpack:///./src/components/Gallery/index.js","webpack:///./src/templates/project.js"],"names":["StyledItem","styled","div","props","even","css","Item","image","title","className","objectFit","objectPosition","width","height","maxHeight","fixed","alt","StyledGrid","section","Gallery","items","map","x","idx","key","StyledProjectPage","article","pageQuery","ProjectPage","data","markdownRemark","frontmatter","html","Layout","SEO","Container","programs","length","to","slug","dangerouslySetInnerHTML","__html","gallery","childImageSharp","Share"],"mappings":"6QAKMA,EAAaC,IAAOC,IAAV,sEAAGD,CAAH,oaAGZ,SAACE,GAAD,OACAA,EAAMC,KACFC,YADJ,wCAIIA,YAJJ,4CA0DWC,EAvBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAOJ,EAAjB,EAAiBA,KAAjB,OACX,kBAACJ,EAAD,CAAYI,KAAMA,GAChB,yBAAKK,UAAW,SACd,kBAAC,IAAD,CACEC,UAAW,QACXC,eAAgB,SAChBC,MAAO,OACPC,OAAQ,OACRC,UAAW,QACXC,MAAOR,EACPS,IAAKR,KAGT,yBAAKC,UAAW,SAAUD,KCnDxBS,EAAahB,IAAOiB,QAAV,sEAAGjB,CAAH,yKCLDkB,EDeF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,kBAACH,EAAD,KACGG,EAAMC,KAAI,SAACC,EAAGC,GAAJ,OACT,yBAAKC,IAAKD,GACR,kBAAC,EAAD,iBAAUD,EAAV,CAAalB,QAASmB,EAAM,Y,YER9BE,EAAoBxB,IAAOyB,QAAV,6EAAGzB,CAAH,+IAmFV0B,GAFEC,UAjEK,SAAC,GAAD,QAClBC,KACEC,eAAkBC,EAFF,EAEEA,YAAaC,EAFf,EAEeA,KAFf,OAKlB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK1B,MAAOuB,EAAYvB,QACxB,kBAAC2B,EAAA,EAAD,KACE,kBAACV,EAAD,KACE,4BAAKM,EAAYvB,OAChBuB,EAAYK,UAAYL,EAAYK,SAASC,OAAS,GACrD,yBAAK5B,UAAW,YAAhB,uBACuB,IACpBsB,EAAYK,SAASf,KAAI,SAACC,EAAGC,GAAJ,OACxB,kBAAC,OAAD,CAAMC,IAAKD,EAAKe,GAAE,aAAehB,EAAES,YAAYQ,MAC5CjB,EAAES,YAAYvB,WAMvB,yBAAKgC,wBAAyB,CAAEC,OAAQT,KAEvCD,EAAYW,SACX,oCACE,wBAAIjC,UAAW,WAAf,wBACA,kBAAC,EAAD,CACEW,MAAOW,EAAYW,QAAQrB,KAAI,SAACC,GAAD,MAAQ,CACrCd,MAAOc,EAAEd,MACTD,MAAOe,EAAEf,MAAMoC,gBAAgB5B,aAMvC,wBAAIN,UAAW,SAAf,4BACA,kBAACmC,EAAA,EAAD,UA+Bc","file":"component---src-templates-project-js-acf9b6091abf40dcd10a.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\nimport GatsbyImage from 'gatsby-image';\n\nconst StyledItem = styled.div`\n  position: relative;\n  transition: transform 0.3s;\n  ${(props) =>\n    props.even\n      ? css`\n          transform: rotate(3deg) scale(0.8);\n        `\n      : css`\n          transform: rotate(-3deg) scale(0.8);\n        `}\n  -webkit-backface-visibility: hidden;\n  padding: 0.7rem 0.7rem 0;\n  text-align: left;\n  .gatsby-image-wrapper {\n    display: block !important;\n  }\n  .gatsby-image-wrapper,\n  img {\n    margin-bottom: 0;\n  }\n  box-shadow: 0 0 0.3rem rgba(0, 0, 0, 0.3);\n  .image {\n    a {\n      display: block;\n      &:hover {\n        transform: scale(1.2) rotate(5deg);\n      }\n    }\n  }\n  .title {\n    padding: 0.7rem 1rem 1.5rem;\n    text-align: center;\n  }\n  &:hover {\n    transform: rotate(0deg) scale(1);\n  }\n`;\n\nconst Item = ({ image, title, even }) => (\n  <StyledItem even={even}>\n    <div className={'image'}>\n      <GatsbyImage\n        objectFit={'cover'}\n        objectPosition={'100% 0'}\n        width={'100%'}\n        height={'100%'}\n        maxHeight={'25rem'}\n        fixed={image}\n        alt={title}\n      />\n    </div>\n    <div className={'title'}>{title}</div>\n  </StyledItem>\n);\n\nItem.propTypes = {\n  image: PropTypes.object,\n  title: PropTypes.string,\n  even: PropTypes.bool,\n};\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Item from './Item';\n\nconst StyledGrid = styled.section`\n  margin: 1rem 0;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 250px));\n  grid-gap: 1rem;\n  justify-content: center;\n  align-items: center;\n  justify-items: center;\n`;\n\nconst Grid = ({ items }) => (\n  <StyledGrid>\n    {items.map((x, idx) => (\n      <div key={idx}>\n        <Item {...x} even={!!(idx % 2)} />\n      </div>\n    ))}\n  </StyledGrid>\n);\n\nGrid.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      image: PropTypes.object.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Grid;\n\n","import Gallery from './Gallery';\nexport default Gallery;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport { Link } from 'gatsby-plugin-intl';\n\nimport Layout from '../components/Layout';\nimport Container from '../components/Container';\nimport Share from '../components/Share';\nimport Gallery from '../components/Gallery';\nimport SEO from '../components/SEO';\n\nconst StyledProjectPage = styled.article`\n  text-align: justify;\n  max-width: 900px;\n  margin: 0 auto;\n  h2 {\n    text-align: center;\n  }\n  h4.gallery,\n  h4.share {\n    margin-top: 3rem;\n  }\n  .programs {\n    text-align: center;\n  }\n`;\n\nconst ProjectPage = ({\n  data: {\n    markdownRemark: { frontmatter, html },\n  },\n}) => (\n  <Layout>\n    <SEO title={frontmatter.title} />\n    <Container>\n      <StyledProjectPage>\n        <h2>{frontmatter.title}</h2>\n        {frontmatter.programs && frontmatter.programs.length > 0 && (\n          <div className={'programs'}>\n            Dentro del programa:{' '}\n            {frontmatter.programs.map((x, idx) => (\n              <Link key={idx} to={`/programs/${x.frontmatter.slug}`}>\n                {x.frontmatter.title}\n              </Link>\n            ))}\n          </div>\n        )}\n\n        <div dangerouslySetInnerHTML={{ __html: html }} />\n\n        {frontmatter.gallery && (\n          <>\n            <h4 className={'gallery'}>Galer√≠a de medios...</h4>\n            <Gallery\n              items={frontmatter.gallery.map((x) => ({\n                title: x.title,\n                image: x.image.childImageSharp.fixed,\n              }))}\n            />\n          </>\n        )}\n\n        <h4 className={'share'}>Comparte en tus redes...</h4>\n        <Share />\n      </StyledProjectPage>\n    </Container>\n  </Layout>\n);\n\nProjectPage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        programs: PropTypes.arrayOf(\n          PropTypes.shape({\n            slug: PropTypes.string,\n            title: PropTypes.srtring,\n          })\n        ),\n        gallery: PropTypes.arrayOf(\n          PropTypes.shape({\n            title: PropTypes.string,\n            image: PropTypes.object,\n          })\n        ),\n      }),\n      html: PropTypes.string,\n    }),\n  }),\n};\n\nexport default ProjectPage;\n\nexport const pageQuery = graphql`\n  query($slug: String) {\n    markdownRemark(\n      frontmatter: { slug: { eq: $slug } }\n      fileInfo: { sourceInstanceName: { eq: \"projects\" } }\n    ) {\n      frontmatter {\n        slug\n        title\n        programs {\n          frontmatter {\n            slug\n            title\n          }\n        }\n        gallery {\n          title\n          image {\n            childImageSharp {\n              fixed(quality: 95, width: 250, height: 250, fit: INSIDE) {\n                ...GatsbyImageSharpFixed_withWebp\n              }\n            }\n          }\n        }\n      }\n      html\n    }\n  }\n`;\n"],"sourceRoot":""}